
[{"content":"Hi, I’m Chandler McLaren—a data professional with a unique journey that blends athletics, engineering, and technology.\nI began my career as a professional baseball player, competing globally and learning firsthand the power of performance data in driving results. After retiring from the game, I transitioned into the aerospace industry as a Chemical Processing Specialist at Collins Aerospace, where I developed a technical foundation in engineering processes, precision systems, and problem-solving under high standards of quality and safety.\nToday, I bring those diverse experiences together through CM Data Solutions, where I specialize in helping businesses harness the power of data engineering, analytics, AI, and cloud integration to make smarter, faster decisions. My approach combines the discipline of engineering with the creativity of analytics—building solutions that are both technically sound and strategically impactful.\nWhether it’s designing scalable data pipelines, integrating cloud platforms like AWS or Azure, applying machine learning and AI models to solve complex challenges, or delivering actionable insights through dashboards and analytics, I focus on creating end-to-end solutions tailored to each client’s needs.\nMy mission is simple: turn data into a competitive advantage.\nIf you’re looking for a partner who understands the game—whether on the field, in the lab, or in the cloud—I’d love to help you unlock the full potential of your data.\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/about/","section":"About Me","summary":"","title":"About Me","type":"about"},{"content":" This AI-powered contract analysis tool is built with Python and Streamlit, leveraging Hugging Face Transformers for text summarization and structured contract evaluation.\nUsers input contract text or keywords, which are processed to find the closest matching contract from a local database.\nThe BART (facebook/bart-large-cnn) model is applied via a text2text-generation pipeline to generate structured summaries, highlighting obligations, deadlines, penalties, high-risk clauses, and plain-language explanations.\nDevice selection automatically uses GPU, Apple MPS, or CPU to optimize inference speed and efficiency.\nThe Streamlit frontend provides an interactive, real-time interface, displaying AI-generated analyses alongside keyword-based highlights for clarity and readability.\nYou can find the code for this project in my Github Repo\nBack to AI Engineering\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/projects/ai-engineering/contract-agent/","section":"Projects","summary":"An AI Agent that Searches for and Analyses Contracts","title":"AI Contract Analysis","type":"projects"},{"content":"Back to Projects\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/projects/ai-engineering/","section":"Projects","summary":"Building intelligent, predictive, and scalable AI solutions","title":"AI Engineering","type":"projects"},{"content":" This chatbot is a Retrieval-Augmented Generation (RAG) system built with Python, Gradio, and LangChain, leveraging IBM Watsonx Foundation Models for both embedding and text generation.\nUsers upload PDF documents, which are processed using PyPDFLoader and RecursiveCharacterTextSplitter to create manageable text chunks.\nWatsonx embeddings are applied to the chunks and stored in a Chroma vector database, enabling semantic search for relevant content.\nQueries are passed to a Watsonx LLM (mixtral-8x7b-instruct-v01) via LangChain’s RetrievalQA chain, which generates accurate, context-aware responses based on the uploaded documents.\nThe frontend is a Gradio interface, providing an interactive, user-friendly experience for asking questions and viewing answers instantly.\nYou can find the code for this project in my Github Repo\nBack to AI Engineering\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/projects/ai-engineering/pdf-reader/","section":"Projects","summary":"Answering questions from PDF documents","title":"AI PDF Reader","type":"projects"},{"content":"Back to Projects\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/projects/analytics-visualizations/","section":"Projects","summary":"Clear insights through interactive dashboards, and data visualization","title":"Analytics and Visualizations","type":"projects"},{"content":"","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"The goal of this project is to take raw crowdfunding campaign data and build an analytics-ready database. The workflow includes:\nData Cleaning \u0026amp; Transformation # Load raw CSV data using Pandas. Convert timestamp fields to datetime objects. Convert boolean fields (staff_pick, spotlight) to proper boolean type. Split the category column into category and sub_category. Dimension \u0026amp; Fact Tables # Created dimension tables:\ndim_time — stores unique dates with year, month, day, weekday. dim_category — stores categories and subcategories. dim_country — stores country and currency information. dim_campaign — stores campaign metadata (name, blurb, staff_pick, spotlight). Created fact table: fact_campaign — stores campaign metrics (goal, pledged, backers_count, outcome) and foreign keys referencing dimension tables. Database Schema # Star schema design for easy analytics. Enforced foreign key relationships between fact and dimension tables. Cloud Integration # PostgreSQL database hosted on AWS RDS. Data loaded programmatically using Python and SQLAlchemy. Scripts include functionality to connect to RDS, create tables, and import cleaned data. You can find the code for this project in my Github Repo\nBack to Data Engineering\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/projects/data-engineering/aws-postgressql/","section":"Projects","summary":"Crowdfunding Data Pipeline","title":"AWS(RDS) + PostgreSQL","type":"projects"},{"content":"","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":" Projects Coming Soon! # Back to Projects\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/projects/cloud-integration/","section":"Projects","summary":"Building scalable, efficient, and cost-effective cloud solutions","title":"Cloud Integration","type":"projects"},{"content":"For any business inquiries, please contact me on Fiverr or via Email.\nEmail: datasolutions.cm@gmail.com\nLinkedIn: https://www.linkedin.com/in/chandler-mclaren-6030a026b/\nGitHub: https://github.com/Chan-McLaren\nFiverr: https://www.fiverr.com/s/42B4pNb\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/contact/","section":"Contact","summary":"","title":"Contact","type":"contact"},{"content":" This chatbot is a Retrieval-Augmented Generation (RAG) system built using Python, FastAPI, React, and TailwindCSS. It combines LangChain, Chroma vector database, and sentence-transformer embeddings to provide context-aware answers from your documentation.\nLangChain orchestrates the workflow, retrieving relevant document chunks from Chroma and feeding them into the Google Flan-T5 LLM for natural language response generation.\nDocuments are embedded with all-MiniLM-L6-v2 embeddings, allowing semantic search across your FAQ or knowledge base.\nThe frontend is a React app with a responsive, dynamic chat UI built with TailwindCSS. It supports automatic scrolling, live typing indicators, and seamless interaction with the backend.\nThis architecture ensures your chatbot can answer questions accurately based on the documents provided, while remaining scalable for additional knowledge sources.\nYou can find the code for this project in my Github Repo\nBack to AI Engineering\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/projects/ai-engineering/customer-support-bot/","section":"Projects","summary":"A RAG Chatbot built with Python","title":"Customer Support Chatbot","type":"projects"},{"content":"Back to Projects\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/projects/data-engineering/","section":"Projects","summary":"Turning raw data into reliable pipelines and architectures","title":"Data Engineering","type":"projects"},{"content":"Helping deliver data-driven solutions\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/","section":"Home","summary":"","title":"Home","type":"page"},{"content":" Project Coming Soon! # Back to Data Engineering\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/projects/data-engineering/mongodb/","section":"Projects","summary":"Project Coming Soon!","title":"MongoDB","type":"projects"},{"content":"PostgreSQL Database Design - Movie Rental Company\nLeveraging Python and SQLAlchemy to automate a complete data pipeline for a movie rental company. The database is designed to efficiently manage films, inventory, rentals, customers, stores, and payments, with a focus on relational integrity and scalability.\nBelow is the Entity-Relationship Diagram (ERD) illustrating table relationships, followed by the table schema. The schema demonstrates advanced PostgreSQL concepts including:\nPrimary keys and foreign keys to enforce relationships between tables. Array types (special_features) and full-text search (tsvector) for flexible data storage and querying. Default values and constraints to maintain data consistency. Timestamps for tracking updates (last_update) and data creation (create_date). The database supports queries and analyses across multiple entities, allowing operations such as:\nTracking film inventory across stores and rentals. Calculating rental statistics and payment totals. Associating customers with stores and addresses for targeted operations. Performing complex queries involving full-text search and aggregation. Back to Data Engineering\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/projects/data-engineering/postgressql/","section":"Projects","summary":"Database Design for a Movie Rental Company","title":"PostgreSQL","type":"projects"},{"content":" Project Coming Soon! # Back to Analytics and Visualizations\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/projects/analytics-visualizations/powerbi/","section":"Projects","summary":"Project Coming Soon!","title":"Power BI","type":"projects"},{"content":"Navigate through the topics below to see my related projects and please feel free to visit my Github Portfolio to see more of my work.\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/projects/","section":"Projects","summary":"","title":"Projects","type":"projects"},{"content":" Statistical Analysis # The following gallery showcases Python-based visualizations designed to highlight key statistical concepts and analytical techniques. Some visuals focus on exploratory data analysis, such as box plots to identify outliers, facet plots for vehicle comparisons, and gradient scatter plots to illustrate median income across locations. Other visualizations demonstrate more advanced statistical analysis, including scatter plots with regression lines to compute R-squared values, correlation charts to quantify relationships between variables, and bar charts of MPG with associated standard deviations to analyze changes in mean values.\nYou can find a project using the methods shown in this gallery in my Github Repo\nBack to Analytics and Visualizations\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/projects/analytics-visualizations/statistical-analysis/","section":"Projects","summary":"A Gallery of Statistical Analysis with Python","title":"Python Visualizations","type":"projects"},{"content":"","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":" AI Engineering: I design and implement AI-powered solutions tailored to business needs, including natural language processing, predictive modeling, and generative AI applications. By leveraging the latest machine learning and large language model technologies, I enable clients to automate workflows, enhance customer experiences, and unlock new sources of value from their data. (Python, LangChain, RAG, Transformers, Hugging Face, OpenAI, etc\u0026hellip;) Analytics \u0026amp; Visualizations: I provide data analysis and visualization services that transform raw data into clear, actionable insights. From interactive dashboards to advanced statistical analysis, I help clients uncover trends, identify opportunities, and make data-driven decisions with confidence. (Python, Tableau, Power BI) Cloud Integration: I can help businesses deploy and scale solutions in the cloud using platforms like AWS and Azure. From migrating databases to implementing cloud-based analytics and AI, I ensure systems are secure, cost-efficient, and highly available. My cloud integration services allow clients to modernize infrastructure, improve collaboration, and innovate faster. (Python, AWS, Azure, Docker, GitHub Actions, S3-compatible storage, etc\u0026hellip;) Data Engineering: I build robust data pipelines and architectures that ensure data is collected, cleaned, and delivered efficiently to the right systems. From database design to ETL/ELT processes and real-time streaming, I make data reliable, scalable, and ready for analytics or AI. This helps clients reduce bottlenecks, improve reporting accuracy, and prepare for long-term growth. (Python, SQL, NoSQL, ETL/ELT, Postgres, MongoDB, etc\u0026hellip;) ","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/services/","section":"Services","summary":"","title":"Services","type":"services"},{"content":" Superstore Sales Dashboard # The following dashboards, built in Tableau Public with the Superstpre dataset, illustrate the progression from a simple high-level view to a more advanced analytical solution. The first dashboard delivers quick insights into yearly sales performance, showing how Tableau can rapidly create clarity from raw data. The second, more complex dashboard builds on this foundation, layering in year-over-year comparisons and deeper analysis to uncover trends and patterns that support stronger business decisions. Together, they highlight the range of insights that can be achieved=from fast overviews to detailed, interactive exploration.\nBasic - Clean and Simple # Features:\nTooltips hover over data points Above and below average sales are shown in green and red Map graph uses a gradient to colour the data red to green Totals for sales, profit and number of orders are shown under title All sheets spaced out to make it easier to read Interactive filters\nSales by state on the map Sales by product on the bar chart with an average line Sales by month on the line chart with points for each month Advanced - More Features and Filters # Features:\nTooltips hover over data points Preformance overview title response to the selected year Buttons to toggle between sales, profit and orders Previous year data is shown with a yellow line Increased and decresed comparison to previous year is shown with green and red colouring. Sales, profit, order and number of customers show total, previous year total and percentage change. Legend under title Interactive filters:\nDropdown menu for year selection Map graph for state selection with data responsive circle indicators. Vertical bar charts for category, segment, shipment and state. The charts will stack selected data filtering further and display total in percentage. Horizontal bar charts for sales, profit, order and number of customers show monthly data compared to preivous year. Reference # The advanced dasboard is not my original design but a recreation of Dmitry Shirikov\u0026rsquo;s Tableau Public Dashboard. I used his dashboard as a learning template, rebuilding it from scratch to match the same vizualizations and functionality. His original work can be found here if you\u0026rsquo;d like to explore or attempt your own version.\nBack to Analytics and Visualizations\n","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/projects/analytics-visualizations/tableau/","section":"Projects","summary":"Simple vs. Advanced Superstore Sales Dashboard","title":"Tableau","type":"projects"},{"content":"","externalUrl":null,"permalink":"/Chan-McLaren/Chan-McLaren.github.io/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]